name: "Signed Commit Action"
description: "Creates a signed commit using GitHub GraphQL and optionally creates a PR"
author: "Aaron Robinson"

inputs:
  git_path:
    description: "Path used by git to add files"
    required: false
    default: "."
  pr_title:
    description: "Title for the PR (only required if creating a new PR)"
    required: false
  pr_body:
    description: "Body for the PR (only required if creating a new PR)"
    required: false
  github_token:
    description: "GitHub token with permissions to commit and create PRs"
    required: true
  # The following parameters support the signed commit changes to be pushed to a separate repository
  remote_repository:
    description: "The remote repository organisation & name if the changes are to be pushed to a remote repository"
    required: false
  remote_repository_path:
    description: "Path to the remote repository's local git directory"
    required: false

runs:
  using: "composite"
  steps:
    - name: Set github token for the target repository
      run: echo "GITHUB_TOKEN=${{ inputs.github_token }}" >> $GITHUB_ENV
      shell: bash

    - name: Check for changes
      run: |
        # Show the status and diff before attempting to add files
        echo "===== Check for changes ====="
        if [ ! -z "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
          git_path="${{ inputs.git_path }}"
        else
          git_path="${{ inputs.git_path }}"
        fi

        git status
        git diff
        git add "$git_path"
        changes=$(git diff --staged --name-only)

        if [ -z "$changes" ]; then
          echo "No changes detected."
          echo "changes=false" >> $GITHUB_ENV
        else
          echo "Changes detected."
          echo "changes=true" >> $GITHUB_ENV
          git diff --staged --name-only > changed_files.txt
          cat changed_files.txt
        fi
      shell: bash

    - name: Get latest commit
      if: env.changes == 'true'
      run: |
        echo "===== Get latest commit ====="
        if [ ! -z "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
        fi
        base_branch=$(git rev-parse --abbrev-ref HEAD)

        # Check if remote branch exists
        if ! git rev-parse origin/$base_branch; then
          echo "No remote branch detected. Using local branch."
          commit_oid=$(git rev-parse $base_branch)
        else
          commit_oid=$(git rev-parse origin/$base_branch)
        fi

        echo "commit_oid=$commit_oid" >> $GITHUB_ENV
      shell: bash

    - name: Generate new branch
      if: env.changes == 'true' && github.event_name != 'pull_request'
      run: |
        echo "===== Generate new branch ====="
        if [ ! -z "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
        fi
        date=$(date +%Y_%m_%d_%H_%M)
        branch_name="signed_commit_$date"
        git checkout -b $branch_name
        if [ ! -z "${{ inputs.remote_repository }}" ]; then
          git config --global credential.helper store
          echo "https://x-access-token:${GITHUB_TOKEN}@github.com" > ~/.git-credentials
          git remote set-url origin https://github.com/${{ inputs.remote_repository }}.git
        fi
        git push -u origin $branch_name
        rm -f ~/.git-credentials
        echo "branch_name=$branch_name" >> $GITHUB_ENV
      shell: bash

    - name: Use current branch if on a PR
      if: env.changes == 'true' && github.event_name == 'pull_request'
      run: |
        echo "===== Using current branch ====="
        current_branch=$(git rev-parse --abbrev-ref HEAD)
        echo "branch_name=$current_branch" >> $GITHUB_ENV
      shell: bash

    - name: Prepare the changes for GraphQL
      if: env.changes == 'true'
      run: |
        echo "===== Prepare the changes for GraphQL ====="
        if [ ! -z "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
        fi
        # Initialize an empty JSON object for the additions
        files_for_commit='{"additions": []}'

        # Read the changed files from changed_files.txt
        while IFS= read -r file; do
          if [[ -f "$file" ]]; then
            # Add a newline to the end of the content
            file_content="$(cat "$file")"

            # Base64 encode the contents of the file
            base64_content=$(base64 < "$file" | tr -d '\n')

            # Construct a JSON object for this file and append it to the additions array
            files_for_commit=$(echo "$files_for_commit" | jq --arg path "$file" --arg content "$base64_content" \
              '.additions += [{ "path": $path, "contents": $content }]')
          fi
        done < changed_files.txt

        # Output the final JSON array
        echo "$files_for_commit" > files_for_commit.json
      shell: bash

    - name: Create signed commit using GraphQL
      if: env.changes == 'true'
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      run: |
        echo "===== Create signed commit using GraphQL ====="
        if [ ! -z "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
          github_repo="${{ inputs.remote_repository }}"
        else
          github_repo="${{ github.repository }}"
        fi

        commit_message="Automated signed commit update"

        jq -n \
          --arg repository "$github_repo" \
          --arg branch_name "$branch_name" \
          --arg commit_oid "$commit_oid" \
          --arg commit_message "$commit_message" \
          --slurpfile fileChanges files_for_commit.json \
          '{
            query: "mutation($input: CreateCommitOnBranchInput!) { createCommitOnBranch(input: $input) { commit { oid } } }",
            variables: {
              input: {
                branch: {
                  repositoryNameWithOwner: $repository,
                  branchName: $branch_name
                },
                message: {
                  headline: $commit_message
                },
                fileChanges: $fileChanges[0],
                expectedHeadOid: $commit_oid
              }
            }
          }' > mutation_payload.json

        RESPONSE=$(curl -X POST -H "Authorization: bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          --data @mutation_payload.json https://api.github.com/graphql)

        COMMIT_OID=$(echo "$RESPONSE" | jq -r ".data.createCommitOnBranch.commit.oid")

        if [ "$COMMIT_OID" != "null" ]; then
          echo "Commit successfully created with OID: $COMMIT_OID"
        else
          echo "Error creating commit: $RESPONSE"
          exit 1
        fi
      shell: bash

    - name: Set PR title and body
      if: env.changes == 'true' && github.event_name != 'pull_request'
      run: |
        echo "pr_title=${{ inputs.pr_title }}" >> $GITHUB_ENV
        echo "pr_body=${{ inputs.pr_body }}" >> $GITHUB_ENV
      shell: bash

    - name: Create a PR if not running on a PR
      if: env.changes == 'true' && github.event_name != 'pull_request'
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      run: |
        echo "===== Create a PR if not running on a PR ====="
        repo_option=""
        if [ ! -z "${{ inputs.remote_repository }}" ]; then
          repo_option="--repo github.com/${{ inputs.remote_repository }}"
        fi

        pr_title="${pr_title:-Automated Signed Commit Update}"
        pr_body="${pr_body:-This PR was automatically created by a GitHub workflow to apply a signed commit update.}"

        gh pr create $repo_option \
          --base main \
          --head ${{ env.branch_name }} \
          --title "$pr_title" \
          --body "$pr_body"
      shell: bash
