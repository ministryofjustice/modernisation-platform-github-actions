name: "Signed Commit Action"
description: "Creates a signed commit using GitHub GraphQL and optionally creates a PR"
author: "Aaron Robinson"

inputs:
  git_path:
    description: "Path used by git to add files"
    required: false
    default: "."
  pr_title:
    description: "Title for the PR (only required if creating a new PR)"
    required: false
  pr_body:
    description: "Body for the PR (only required if creating a new PR)"
    required: false
  github_token:
    description: "GitHub token with permissions to commit and create PRs"
    required: true
  terraform_github_token:
    description: "GitHub token used for operations against the remote repository"
    required: false
  remote_repository:
    description: "The remote repository organisation & name if the changes are to be pushed to a remote repository"
    required: false
  remote_repository_path:
    description: "Path to the remote repository's local git directory"
    required: false

runs:
  using: "composite"
  steps:
    - name: Check for changes
      shell: bash
      run: |
        # Show the status and diff before attempting to add files
        echo "===== Check for changes ====="
        if [ -n "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
        fi
        git_path="${{ inputs.git_path }}"
        git status
        git diff
        git add "$git_path"
        changes=$(git diff --staged --name-only)

        if [ -z "$changes" ]; then
          echo "No changes detected."
          echo "changes=false" >> $GITHUB_ENV
        else
          echo "Changes detected."
          echo "changes=true" >> $GITHUB_ENV
          git diff --staged --name-only > changed_files.txt
          cat changed_files.txt
        fi

    - name: Get latest commit
      if: env.changes == 'true'
      id: get_latest_commit
      shell: bash
      run: |
        echo "===== Determine latest commit SHA ====="
        set -e

        if [ -n "${{ inputs.remote_repository_path }}" ]; then
          github_repo="${{ inputs.remote_repository }}"
          GITHUB_TOKEN="${{ inputs.terraform_github_token }}"
          if [ -z "$GITHUB_TOKEN" ]; then
            GITHUB_TOKEN="${{ inputs.github_token }}"
          fi
        else
          github_repo="${GITHUB_REPOSITORY}"
          GITHUB_TOKEN="${{ inputs.github_token }}"
          if [ -z "$GITHUB_TOKEN" ]; then
            GITHUB_TOKEN="${{ github.token }}"
          fi
        fi

        branch_name="${GITHUB_REF_NAME}"
        echo "Fetching latest commit for $github_repo on branch $branch_name..."
        api_url="https://api.github.com/repos/$github_repo/commits/$branch_name"
        api_response=$(curl -sS -H "Authorization: Bearer $GITHUB_TOKEN" "$api_url")

        safe_response=$(echo "$api_response" | jq '{message: .commit.message, sha: .sha}')
        echo "Latest commit: $safe_response"

        commit_oid=$(echo "$api_response" | jq -r '.sha')

        echo "branch_name=$branch_name" >> $GITHUB_ENV
        echo "commit_oid=$commit_oid" >> $GITHUB_ENV
        echo "github_repo=$github_repo" >> $GITHUB_ENV
        echo "GITHUB_TOKEN=$GITHUB_TOKEN" >> $GITHUB_ENV

    - name: Use current branch if on a PR
      if: env.changes == 'true' && github.event_name == 'pull_request'
      shell: bash
      run: |
        echo "branch_name=${GITHUB_HEAD_REF}" >> $GITHUB_ENV

    - name: Prepare the changes for GraphQL
      if: env.changes == 'true'
      shell: bash
      run: |
        echo "===== Prepare the changes for GraphQL ====="
        if [ -n "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
        fi
        # Initialize an empty JSON object for the additions
        files_for_commit='{"additions": []}'

        # Read the changed files from changed_files.txt
        while IFS= read -r file; do
          if [[ -f "$file" ]]; then
            # Base64 encode the contents of the file
            base64_content=$(base64 < "$file" | tr -d '\n')

            # Construct a JSON object for this file and append it to the additions array
            files_for_commit=$(echo "$files_for_commit" | jq --arg path "$file" --arg content "$base64_content" '.additions += [{ "path": $path, "contents": $content }]')
          fi
        done < changed_files.txt
        echo "$files_for_commit" > files_for_commit.json

    - name: Create signed commit using GraphQL
      if: env.changes == 'true'
      shell: bash
      run: |
        echo "===== Create signed commit using GraphQL ====="
        github_repo="$github_repo"
        branch_name="$branch_name"
        commit_oid="$commit_oid"
        GITHUB_TOKEN="$GITHUB_TOKEN"

        commit_message="Automated signed commit update"

        jq -n \
          --arg repository "$github_repo" \
          --arg branch_name "$branch_name" \
          --arg commit_oid "$commit_oid" \
          --arg commit_message "$commit_message" \
          --slurpfile fileChanges files_for_commit.json \
          '{
            query: "mutation($input: CreateCommitOnBranchInput!) { createCommitOnBranch(input: $input) { commit { oid } } }",
            variables: {
              input: {
                branch: {
                  repositoryNameWithOwner: $repository,
                  branchName: $branch_name
                },
                message: { headline: $commit_message },
                fileChanges: $fileChanges[0],
                expectedHeadOid: $commit_oid
              }
            }
          }' > mutation_payload.json

        RESPONSE=$(curl -s -X POST -H "Authorization: bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          --data @mutation_payload.json https://api.github.com/graphql)

        COMMIT_OID=$(echo "$RESPONSE" | jq -r ".data.createCommitOnBranch.commit.oid")

        if [ "$COMMIT_OID" != "null" ]; then
          echo "✅ Commit successfully created with OID: $COMMIT_OID"
        else
          echo "❌ Error creating commit: $RESPONSE"
          exit 1
        fi

    - name: Set PR title and body
      if: env.changes == 'true' && github.event_name != 'pull_request'
      shell: bash
      run: |
        echo "PR_TITLE=${{ inputs.pr_title }}" >> $GITHUB_ENV
        echo "PR_BODY=${{ inputs.pr_body }}" >> $GITHUB_ENV

    - name: Create a PR if not running on a PR
      if: env.changes == 'true' && github.event_name != 'pull_request'
      shell: bash
      run: |
        echo "===== Create a PR if not running on a PR ====="
        GH_TOKEN="$GITHUB_TOKEN"
        export GH_TOKEN

        repo_option=""
        if [ -n "${{ inputs.remote_repository }}" ]; then
          repo_option="--repo $github_repo"
        fi

        # Get default branch dynamically
        DEFAULT_BRANCH=$(curl -s -H "Authorization: Bearer $GH_TOKEN" "https://api.github.com/repos/$github_repo" | jq -r '.default_branch')

        pr_title="${PR_TITLE:-Automated Signed Commit Update}"
        pr_body="${PR_BODY:-This PR was automatically created by a GitHub workflow to apply a signed commit update.}"

        gh pr create $repo_option \
          --base "$DEFAULT_BRANCH" \
          --head "$branch_name" \
          --title "$pr_title" \
          --body "$pr_body"
