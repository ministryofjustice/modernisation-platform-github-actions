name: "Signed Commit Action"
description: "Creates a signed commit using GitHub GraphQL and optionally creates a PR"
author: "Aaron Robinson"

inputs:
  git_path:
    description: "Path used by git to add files"
    required: false
    default: "."
  github_token:
    description: "Token for GraphQL commit & PR creation"
    required: true
  terraform_github_token:
    description: "Token for authenticated Git operations on the remote repo"
    required: false
  remote_repository:
    description: "Full repo name (org/repo) for remote commits"
    required: false
  remote_repository_path:
    description: "Path to checked-out remote repo"
    required: false
  pr_title:
    description: "Title for PR (if creating one)"
    required: false
    default: "Automated changes"
  pr_body:
    description: "Body for PR (if creating one)"
    required: false
    default: "This PR contains automated changes created by the Signed Commit Action."

runs:
  using: "composite"
  steps:

    - name: Check for changes
      shell: bash
      run: |
        echo "===== Checking for changes ====="
        if [ -n "${{ inputs.remote_repository_path }}" ]; then
          echo "Switching to remote repository path: ${{ inputs.remote_repository_path }}"
          cd "${{ inputs.remote_repository_path }}"
          
          echo "Configuring Git for remote repository authentication..."
          git remote set-url origin "https://x-access-token:${{ inputs.terraform_github_token }}@github.com/${{ inputs.remote_repository }}.git"
        fi

        git_path="${{ inputs.git_path }}"

        echo "===== Current branch ====="
        git rev-parse --abbrev-ref HEAD

        echo "===== Git status BEFORE adding ====="
        git status

        echo "===== Git diff BEFORE adding ====="
        git diff

        # Stage changes
        git add "$git_path"

        echo "===== Git status AFTER adding ====="
        git status

        echo "===== Git diff --staged AFTER adding ====="
        git diff --staged

        # Check if there are staged changes
        changes=$(git diff --staged --name-only)

        if [ -z "$changes" ]; then
          echo "No changes detected — exiting workflow."
          echo "changes=false" >> $GITHUB_ENV
          exit 0
        else
          echo "Changes detected:"
          echo "$changes"
          echo "changes=true" >> $GITHUB_ENV
          git diff --staged --name-only > changed_files.txt
          cat changed_files.txt
        fi

    - name: Get latest commit SHA and branch
      if: env.changes == 'true'
      shell: bash
      run: |
        echo "===== Getting commit SHA and branch ====="
        if [ -n "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
        fi

        branch_name="$(git symbolic-ref --short HEAD 2>/dev/null || true)"
        if [ -z "$branch_name" ]; then
          branch_name="$(git remote show origin | awk '/HEAD branch/ {print $NF}')"
        fi
        if [ -z "$branch_name" ]; then
          branch_name="${GITHUB_REF_NAME}"
        fi

        commit_oid="$(git rev-parse HEAD)"
        if [ -z "$commit_oid" ]; then
          echo "❌ No commit OID found!"
          exit 1
        fi

        echo "branch_name=$branch_name" >> $GITHUB_ENV
        echo "commit_oid=$commit_oid" >> $GITHUB_ENV
        echo "✅ Branch: $branch_name"
        echo "✅ Commit SHA: $commit_oid"

    - name: Create signed commit via GraphQL
      if: env.changes == 'true'
      shell: bash
      run: |
        echo "===== Creating signed commit ====="
        repo_name="${{ inputs.remote_repository || github.repository }}"
        cd_path="${{ inputs.remote_repository_path || github.workspace }}"
        cd "$cd_path"

        commit_msg="chore: automated changes"
        commit_body=$(git diff --staged --name-only | sed 's/^/- /')

        mutation=$(jq -n --arg oid "$commit_oid" \
                         --arg msg "$commit_msg" \
                         --arg body "$commit_body" \
                         --arg branch "$branch_name" \
                         --arg repo "$repo_name" \
        '{
          query: "mutation($input: CreateCommitOnBranchInput!) { createCommitOnBranch(input: $input) { commit { url oid } } }",
          variables: {
            input: {
              branch: {
                repositoryNameWithOwner: $repo,
                branchName: $branch
              },
              expectedHeadOid: $oid,
              message: { headline: $msg, body: $body },
              fileChanges: { additions: [{ path: ".", contents: "" }] }
            }
          }
        }')

        echo "$mutation" | jq .
        result=$(curl -s -X POST -H "Authorization: bearer ${{ inputs.github_token }}" \
          -H "Content-Type: application/json" \
          -d "$mutation" https://api.github.com/graphql)

        echo "GraphQL Response:"
        echo "$result" | jq .

    - name: Create Pull Request
      if: env.changes == 'true' && github.event_name != 'pull_request'
      shell: bash
      run: |
        echo "===== Creating Pull Request ====="
        repo_name="${{ inputs.remote_repository || github.repository }}"
        pr_data=$(jq -n \
          --arg title "${{ inputs.pr_title }}" \
          --arg body "${{ inputs.pr_body }}" \
          '{title: $title, body: $body, head: "auto-update", base: "main"}')

        curl -s -X POST \
          -H "Authorization: token ${{ inputs.github_token }}" \
          -H "Content-Type: application/json" \
          -d "$pr_data" \
          "https://api.github.com/repos/$repo_name/pulls" | jq .
