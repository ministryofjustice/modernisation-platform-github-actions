name: "Signed Commit Action"
description: "Creates a signed commit using GitHub GraphQL and optionally creates a PR"
author: "Aaron Robinson"
inputs:
  pr_title:
    description: "Title for the PR (only required if creating a new PR)"
    required: false
  pr_body:
    description: "Body for the PR (only required if creating a new PR)"
    required: false
  github_token:
    description: "GitHub token with permissions to commit and create PRs"
    required: true

runs:
  using: "composite"
  steps:
    - name: Check for changes
      run: |
        # Show the status and diff before attempting to pull/push
        echo "===== Git Status & Diff ====="
        git status
        git diff

        echo "===== Git Add ====="
        git add .
        changes=$(git diff --staged --name-only)

        if [ -z "$changes" ]; then
          echo "No changes detected."
          echo "changes=false" >> $GITHUB_ENV
        else
          echo "Changes detected."
          echo "changes=true" >> $GITHUB_ENV
          git diff --staged --name-only > changed_files.txt
        fi
      shell: bash

    - name: Get latest commit OID
      if: env.changes == 'true'
      run: |
        base_branch=$(git rev-parse --abbrev-ref HEAD)
        commit_oid=$(git rev-parse origin/$base_branch)
        echo "commit_oid=$commit_oid" >> $GITHUB_ENV
      shell: bash

    - name: Generate new branch
      if: env.changes == 'true'
      run: |
        date=$(date +%Y_%m_%d_%H_%M)
        branch_name="signed_commit_$date"
        git checkout -b $branch_name
        git push -u origin $branch_name
        echo "branch_name=$branch_name" >> $GITHUB_ENV
      shell: bash

    - name: Prepare the Changes for GraphQL
      if: env.changes == 'true'
      run: |
        # Initialize an empty JSON object for the additions
        files_for_commit='{"additions": []}'

        # Read the changed files from changed_files.txt
        while IFS= read -r file; do
          if [[ -f "$file" ]]; then
            # Add a newline to the end of the content
            file_content="$(cat "$file")"

            # Base64 encode the contents of the file
            base64_content=$(base64 -w 0 <<< "$file_content")

            # Construct a JSON object for this file and append it to the additions array
            files_for_commit=$(echo "$files_for_commit" | jq --arg path "$file" --arg content "$base64_content" \
            '.additions += [{ "path": $path, "contents": $content }]')
          fi
        done < changed_files.txt

        # Output the final JSON array
        echo "$files_for_commit" > files_for_commit.json
      shell: bash

    - name: Create signed commit using GraphQL
      if: env.changes == 'true'
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        commit_message="Automated signed commit update"
        files_for_commit=$(cat files_for_commit.json)

        mutation_payload=$(jq -n \
          --arg repository "${{ github.repository }}" \
          --arg branch_name "$branch_name" \
          --arg commit_oid "$commit_oid" \
          --arg commit_message "$commit_message" \
          --argjson fileChanges "$files_for_commit" \
          '{
            query: "mutation($input: CreateCommitOnBranchInput!) { createCommitOnBranch(input: $input) { commit { oid } } }",
            variables: {
              input: {
                branch: {
                  repositoryNameWithOwner: $repository,
                  branchName: $branch_name
                },
                message: {
                  headline: $commit_message
                },
                fileChanges: $fileChanges,
                expectedHeadOid: $commit_oid
              }
            }
          }')

        RESPONSE=$(curl -X POST -H "Authorization: bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$mutation_payload" https://api.github.com/graphql)

        COMMIT_OID=$(echo "$RESPONSE" | jq -r ".data.createCommitOnBranch.commit.oid")

        if [ "$COMMIT_OID" != "null" ]; then
          echo "Commit successfully created with OID: $COMMIT_OID"
        else
          echo "Error creating commit: $RESPONSE"
          exit 1
        fi
      shell: bash

    - name: Create a PR if not running on a PR
      if: env.changes == 'true' && github.event_name != 'pull_request'
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        gh pr create \
          --base main \
          --head ${{ env.branch_name }} \
          --title "${{ inputs.pr_title || 'Automated Signed Commit Update' }}" \
          --body "${{ inputs.pr_body || 'This PR was automatically created by a GitHub workflow to apply a signed commit update.' }}"
      shell: bash
