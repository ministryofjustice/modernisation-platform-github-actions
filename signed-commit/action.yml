name: "Signed Commit Action"
description: "Creates a signed commit using GitHub GraphQL and optionally creates a PR"
author: "Aaron Robinson"

inputs:
  github_token:
    description: "GitHub token used for authenticated operations"
    required: true
  git_path:
    description: "Path used by git to add files"
    required: false
    default: "."
  remote_repository:
    description: "Optional remote repository in 'owner/repo' format"
    required: false
  remote_repository_path:
    description: "Path where the remote repository is cloned"
    required: false
  pr_title:
    description: "Title of the pull request"
    required: false
    default: "Automated code changes"
  pr_body:
    description: "Body of the pull request"
    required: false
    default: "This PR was created automatically by Signed Commit Action"

runs:
  using: "composite"
  steps:
    - name: Determine repository and branch
      id: repo_info
      shell: bash
      run: |
        repo="${{ inputs.remote_repository }}"
        if [ -z "$repo" ]; then
          repo="${GITHUB_REPOSITORY}"
        fi
        branch="${GITHUB_REF_NAME}"

        echo "repository=$repo" >> $GITHUB_ENV
        echo "branch=$branch" >> $GITHUB_ENV

        echo "===== Repo & Branch Info ====="
        echo "Repository: $repo"
        echo "Branch: $branch"

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.repository }}
        path: ${{ inputs.remote_repository_path || '.' }}
        fetch-depth: 0
        token: ${{ inputs.github_token }}

    - name: Check for changes
      shell: bash
      run: |
        # Show the status and diff before attempting to add files
        echo "===== Check for changes ====="
        if [ -n "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
        fi

        git_path="${{ inputs.git_path }}"
        git status
        git diff
        git add "$git_path"
        changes=$(git diff --staged --name-only)

        if [ -z "$changes" ]; then
          echo "No changes detected."
          echo "changes=false" >> $GITHUB_ENV
        else
          echo "Changes detected:"
          echo "$changes"
          echo "changes=true" >> $GITHUB_ENV
          git diff --staged --name-only > changed_files.txt
          cat changed_files.txt
        fi

    - name: Create signed commit using GraphQL
      if: env.changes == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        repo="${{ env.repository }}"
        owner="${repo%%/*}"
        name="${repo##*/}"
        branch="${{ env.branch }}"
        
        echo "Creating signed commit on $repo@$branch"

        # Get HEAD oid
        head_oid=$(gh api graphql -f query='
        query($owner: String!, $name: String!, $branch: String!) {
          repository(owner: $owner, name: $name) {
            ref(qualifiedName: $branch) {
              target { oid }
            }
          }
        }' -F owner="$owner" -F name="$name" -F branch="$branch" --jq '.data.repository.ref.target.oid')

        files_json="[]"
        while IFS= read -r file; do
          content=$(base64 -w0 "$file")
          files_json=$(jq --arg path "$file" --arg contents "$content" '. + [{"path": $path, "contents": $contents}]' <<< "$files_json")
        done < changed_files.txt

        mutation=$(jq -n --arg repoId "$(gh api graphql -f query='
        query($owner: String!, $name: String!) {
          repository(owner: $owner, name: $name) { id }
        }' -F owner="$owner" -F name="$name" --jq '.data.repository.id')" \
        --arg branch "$branch" \
        --arg message "Automated commit" \
        --arg oid "$head_oid" \
        --argjson files "$files_json" \
        '{ query: "mutation($input: CreateCommitOnBranchInput!) { createCommitOnBranch(input: $input) { commit { oid } } }", variables: { input: { branch: { repositoryNameWithOwner: "'$repo'", branchName: $branch }, message: { headline: $message }, fileChanges: { additions: $files }, expectedHeadOid: $oid } } }')

        echo "$mutation" | gh api graphql --input -

    - name: Create pull request
      if: env.changes == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        echo "Creating PR for ${{ env.repository }}@${{ env.branch }}"
        gh pr create \
          --title "${{ inputs.pr_title }}" \
          --body "${{ inputs.pr_body }}" \
          --head "${{ env.branch }}" \
          --repo "${{ env.repository }}"

    - name: Final summary
      shell: bash
      run: |
        echo "===== Final Summary ====="
        if [ "${{ env.changes }}" = "true" ]; then
          echo "✅ Commit + PR created on ${{ env.repository }}@${{ env.branch }}"
        else
          echo "✅ No changes detected. Nothing to commit."
        fi
