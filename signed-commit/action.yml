name: "Signed Commit Action"
description: "Creates a signed commit using GitHub GraphQL and optionally creates a PR"
author: "Aaron Robinson"

inputs:
  git_path:
    description: "Path used by git to add files"
    required: false
    default: "."
  pr_title:
    description: "Title for the PR (only required if creating a new PR)"
    required: false
  pr_body:
    description: "Body for the PR (only required if creating a new PR)"
    required: false
  github_token:
    description: "GitHub token with permissions to commit and create PRs"
    required: true
  terraform_github_token:
    description: "GitHub token used for operations against the remote repository"
    required: false
  remote_repository:
    description: "The remote repository organisation & name if the changes are to be pushed to a remote repository"
    required: false
  remote_repository_path:
    description: "Path to the remote repository's local git directory"
    required: false

runs:
  using: "composite"
  steps:
    - name: Check for changes
      run: |
        echo "===== Check for changes ====="
        if [ -n "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
        fi
        git_path="${{ inputs.git_path }}"
        git status
        git diff
        git add "$git_path"
        changes=$(git diff --staged --name-only)

        if [ -z "$changes" ]; then
          echo "No changes detected."
          echo "changes=false" >> $GITHUB_ENV
        else
          echo "Changes detected."
          echo "changes=true" >> $GITHUB_ENV
          git diff --staged --name-only > changed_files.txt
          cat changed_files.txt
        fi
      shell: bash

    - name: Get latest commit
      if: env.changes == 'true'
      run: |
        echo "===== Determine latest commit SHA ====="
        if [ -n "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
          github_repo="${{ inputs.remote_repository }}"
        else
          github_repo="${GITHUB_REPOSITORY}"
        fi

        # Try to get the current branch
        branch_name="$(git symbolic-ref --short HEAD 2>/dev/null || true)"
        if [ -z "$branch_name" ]; then
          echo "⚠️ Falling back to remote HEAD..."
          branch_name="$(git remote show origin | awk '/HEAD branch/ {print $NF}')"
        fi
        if [ -z "$branch_name" ]; then
          echo "❌ Could not determine branch name"
          exit 1
        fi

        echo "✅ Using branch: $branch_name"
        echo "branch_name=$branch_name" >> $GITHUB_ENV

        # Choose correct token
        TOKEN="${{ inputs.github_token }}"
        if [ -z "$TOKEN" ] && [ -n "${{ inputs.terraform_github_token }}" ]; then
          TOKEN="${{ inputs.terraform_github_token }}"
        fi

        commit_oid=$(curl -s -H "Authorization: Bearer $TOKEN" \
          -H "Content-Type: application/json" \
          "https://api.github.com/repos/${github_repo}/git/refs/heads/${branch_name}" \
          | jq -r '.object.sha')

        if [ -z "$commit_oid" ] || [ "$commit_oid" = "null" ]; then
          echo "❌ Failed to fetch commit SHA"
          exit 1
        fi

        echo "✅ Commit OID resolved: $commit_oid"
        echo "commit_oid=$commit_oid" >> $GITHUB_ENV
      shell: bash

    - name: Generate new branch
      if: env.changes == 'true' && github.event_name != 'pull_request'
      run: |
        echo "===== Generate new branch ====="
        if [ -n "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
        fi

        date=$(date +%Y_%m_%d_%H_%M)
        branch_name="signed_commit_$date"
        git checkout -b $branch_name

        # Select correct token
        TOKEN="${{ inputs.terraform_github_token || inputs.github_token }}"
        if [ -n "${{ inputs.remote_repository }}" ]; then
          git remote set-url origin "https://x-access-token:$TOKEN@github.com/${{ inputs.remote_repository }}.git"
        fi

        git push -u origin $branch_name
        echo "branch_name=$branch_name" >> $GITHUB_ENV
      shell: bash

    - name: Use current branch if on a PR
      if: env.changes == 'true' && github.event_name == 'pull_request'
      run: |
        echo "branch_name=${GITHUB_HEAD_REF}" >> $GITHUB_ENV
      shell: bash

    - name: Prepare the changes for GraphQL
      if: env.changes == 'true'
      run: |
        echo "===== Prepare the changes for GraphQL ====="
        if [ -n "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
        fi
        files_for_commit='{"additions": []}'

        while IFS= read -r file; do
          if [[ -f "$file" ]]; then
            base64_content=$(base64 < "$file" | tr -d '\n')
            files_for_commit=$(echo "$files_for_commit" | jq --arg path "$file" --arg content "$base64_content" \
              '.additions += [{ "path": $path, "contents": $content }]')
          fi
        done < changed_files.txt

        echo "$files_for_commit" > files_for_commit.json
      shell: bash

    - name: Create signed commit using GraphQL
      if: env.changes == 'true'
      run: |
        echo "===== Create signed commit using GraphQL ====="
        if [ -n "${{ inputs.remote_repository_path }}" ]; then
          cd "${{ inputs.remote_repository_path }}"
          github_repo="${{ inputs.remote_repository }}"
        else
          github_repo="${{ github.repository }}"
        fi

        TOKEN="${{ inputs.github_token }}"
        if [ -z "$TOKEN" ] && [ -n "${{ inputs.terraform_github_token }}" ]; then
          TOKEN="${{ inputs.terraform_github_token }}"
        fi

        commit_message="Automated signed commit update"

        jq -n \
          --arg repository "$github_repo" \
          --arg branch_name "$branch_name" \
          --arg commit_oid "$commit_oid" \
          --arg commit_message "$commit_message" \
          --slurpfile fileChanges files_for_commit.json \
          '{
            query: "mutation($input: CreateCommitOnBranchInput!) { createCommitOnBranch(input: $input) { commit { oid } } }",
            variables: {
              input: {
                branch: {
                  repositoryNameWithOwner: $repository,
                  branchName: $branch_name
                },
                message: { headline: $commit_message },
                fileChanges: $fileChanges[0],
                expectedHeadOid: $commit_oid
              }
            }
          }' > mutation_payload.json

        RESPONSE=$(curl -s -X POST -H "Authorization: bearer $TOKEN" \
          -H "Content-Type: application/json" \
          --data @mutation_payload.json https://api.github.com/graphql)

        COMMIT_OID=$(echo "$RESPONSE" | jq -r ".data.createCommitOnBranch.commit.oid")

        if [ "$COMMIT_OID" != "null" ]; then
          echo "✅ Commit successfully created with OID: $COMMIT_OID"
        else
          echo "❌ Error creating commit: $RESPONSE"
          exit 1
        fi
      shell: bash

    - name: Set PR title and body
      if: env.changes == 'true' && github.event_name != 'pull_request'
      run: |
        echo "pr_title=${{ inputs.pr_title }}" >> $GITHUB_ENV
        echo "pr_body=${{ inputs.pr_body }}" >> $GITHUB_ENV
      shell: bash

    - name: Create a PR if not running on a PR
      if: env.changes == 'true' && github.event_name != 'pull_request'
      run: |
        echo "===== Create a PR ====="

        TOKEN="${{ inputs.github_token }}"
        if [ -z "$TOKEN" ] && [ -n "${{ inputs.terraform_github_token }}" ]; then
          TOKEN="${{ inputs.terraform_github_token }}"
        fi

        if [ -z "$TOKEN" ]; then
          echo "❌ No valid GitHub token available."
          exit 1
        fi

        export GH_TOKEN="$TOKEN"

        repo_option=""
        if [ -n "${{ inputs.remote_repository }}" ]; then
          repo_option="--repo github.com/${{ inputs.remote_repository }}"
        fi

        pr_title="${pr_title:-Automated Signed Commit Update}"
        pr_body="${pr_body:-This PR was automatically created by a GitHub workflow to apply a signed commit update.}"

        gh pr create $repo_option \
          --base main \
          --head "${branch_name}" \
          --title "$pr_title" \
          --body "$pr_body"
      shell: bash
